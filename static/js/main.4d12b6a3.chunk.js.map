{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","todos","reducer","state","action","type","todo","filter","id","AddToDo","target","addToDo","useState","setTodo","handleClick","name","Math","random","Wrapper","Input","placeholder","value","onChange","event","onKeyPress","charCode","Button","add","onClick","ToDoItem","removeToDo","Item","styled","div","button","span","input","App","useReducer","dispatch","class","align","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+8BAEA,IAAMA,EAAe,CAAEC,MAAO,IAkBxBC,EAAU,SAACC,EAAOC,GACpB,MAAoB,QAAhBA,EAAOC,KACA,2BAAIF,GAAX,IAAkBF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBG,EAAOE,SAC1B,WAAhBF,EAAOC,KACP,2BAAIF,GAAX,IAAkBF,MAAOE,EAAMF,MAAMM,QAAO,SAAAD,GAAI,OAAIA,EAAKE,KAAOJ,EAAOI,QAEhEL,GAITM,EAAU,SAAC,GAAiB,IAQNC,EARTC,EAAc,EAAdA,QAAc,EACLC,mBAAS,IADJ,mBACtBN,EADsB,KAChBO,EADgB,KAEvBC,EAAc,WACZR,IACAK,EAAQ,CAAEI,KAAMT,EAAME,GAAIQ,KAAKC,WAC/BJ,EAAQ,MAQhB,OACI,kBAACK,EAAD,KACI,kBAACC,EAAD,CACId,KAAK,OACLe,YAAY,mBACZC,MAAOf,EACPgB,SAAY,SAAAC,GAAK,OAAIV,EAAQU,EAAMb,OAAOW,QAC1CG,gBAXgB,KAApBd,EAAOe,UACPX,OAYA,kBAACY,EAAD,CAAQC,KAAK,EAAMC,QAAS,kBAAMd,MAAlC,SAONe,EAAW,SAAC,GAA0B,IAAxBvB,EAAuB,EAAvBA,KAAMwB,EAAiB,EAAjBA,WACtB,OACI,kBAACZ,EAAD,KACI,kBAACa,EAAD,SAAQzB,EAAKS,KAAb,KACA,kBAACW,EAAD,CAAQE,QAAS,kBAAME,EAAWxB,EAAKE,MAAvC,cAMNU,EAAUc,IAAOC,IAAV,KAQPP,EAASM,IAAOE,OAAV,KAEY,qBAAGP,IAAiB,UAAY,aAC3C,qBAAGA,IAAiB,UAAY,aAOvCI,EAAOC,IAAOG,KAAV,KAIJhB,EAAQa,IAAOI,MAAV,KAWIC,EAjGH,WAAQ,IAAD,EACWC,qBAAWpC,EAASF,GAD/B,mBACRG,EADQ,KACDoC,EADC,KAGTT,EAAa,SAAAtB,GAAE,OAAI+B,EAAS,CAAElC,KAAM,SAAUG,QACpD,OACI,yBAAKgC,MAAM,WAAWC,MAAM,UAA5B,IAAsC,6BAAtC,IAA4C,6BACxC,4CACA,kBAAC,EAAD,CAAS9B,QALD,SAAAL,GAAI,OAAIiC,EAAS,CAAElC,KAAM,MAAOC,YAMvCH,EAAMF,MAAMyC,KAAI,SAAApC,GAAI,OACjB,kBAAC,EAAD,CAAUqC,IAAKrC,EAAKE,GAAIF,KAAMA,EAAMwB,WAAYA,SCF5Cc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d12b6a3.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react'\nimport styled from \"styled-components\"\nconst initialState = { todos: [] }\n\n// Main app\nconst App = () =>  {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const addToDo = todo => dispatch({ type: \"ADD\", todo })\n    const removeToDo = id => dispatch({ type: \"REMOVE\", id })\n    return (\n        <div class=\"col-xs-1\" align=\"center\"> <br/> <br/>\n            <h1> To Do list </h1>\n            <AddToDo addToDo={addToDo} />\n            {state.todos.map(todo => (\n                <ToDoItem key={todo.id} todo={todo} removeToDo={removeToDo}/>\n            ))}\n        </div>\n    )\n}\n\nconst reducer = (state, action) => {\n    if (action.type === \"ADD\") {\n        return {...state, todos: [...state.todos, action.todo]}\n    } else if (action.type === \"REMOVE\") {\n        return {...state, todos: state.todos.filter(todo => todo.id !== action.id)}\n    } else {\n        return state\n    }\n }\n// items\nconst AddToDo = ({ addToDo }) => {\n    const [todo, setTodo] = useState(\"\")\n    const handleClick = () => {\n        if (todo) {\n            addToDo({ name: todo, id: Math.random() })\n            setTodo(\"\")\n        }\n    }\n    const handleKeyPress = (target) =>  {\n        if (target.charCode === 13) {\n            handleClick()\n        }\n    }\n    return (\n        <Wrapper>\n            <Input\n                type=\"text\"\n                placeholder=\"Add your todo...\"\n                value={todo}\n                onChange = {event => setTodo(event.target.value)}\n                onKeyPress={handleKeyPress()}\n            />\n            <Button add={true} onClick={() => handleClick()}>\n                Add\n            </Button>\n        </Wrapper>\n    )\n}\n\nconst ToDoItem = ({ todo, removeToDo }) => {\n    return (\n        <Wrapper>\n            <Item> {todo.name} </Item>\n            <Button onClick={() => removeToDo(todo.id)}> Remove </Button>\n        </Wrapper>\n    )\n}\n// style\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin-bottom: 20px;\n    width: 300px;\n`\n\nconst Button = styled.button`\n    padding: 10px 15px;\n    border: 2px solid ${({ add }) => (add ? \"#5ec25f\" : \"#c35e6b\")};\n    color: ${({ add }) => (add ? \"#5ec25f\" : \"#c35e6b\")};\n    width: 120px;\n    border-radius: 5px;\n    font-size: 18px;\n    cursor: pointer;\n`\n\nconst Item = styled.span`\n    font-size: 18px;\n`\n\nconst Input = styled.input`\n    width: 160px;\n    border: 1px solid lightgray;\n    border-radius: 5px;\n    font-size: 18px;\n    :focus {\n        outline: none;\n    }\n`\n\n// export App\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}